{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(git add:*)",
      "Bash(npm install:*)",
      "Bash(mkdir:*)",
      "Bash(npx playwright:*)",
      "Bash(npm run test:csv-upload:*)",
      "Bash(curl:*)",
      "Bash(npm run setup:*)",
      "Bash(npm run test:browser:*)",
      "Bash(npm run test:file-upload:*)",
      "Bash(ls:*)",
      "Bash(cat:*)",
      "Bash(timeout 30s npx playwright test --project=browser-chrome --grep=\"should show file requirements\" --timeout=15000)",
      "Bash(npx playwright test --project=browser-chrome --grep=\"file requirements|navigation|help text\" --timeout=10000)",
      "Bash(grep:*)",
      "Bash(find:*)",
      "Bash(cp:*)",
      "Bash(mv:*)",
      "Bash(npm init:*)",
      "Bash(node:*)",
      "Bash(rm:*)",
      "Bash(npm test)",
      "Bash(npm test:*)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(./node_modules/.bin/playwright:*)",
      "Bash(git clone:*)",
      "Bash(rustc:*)",
      "Bash(cargo --version)",
      "Bash(cargo build:*)",
      "Bash(npm ls:*)",
      "Bash(npm run:*)",
      "Bash(npm run test:*)",
      "Bash(npm run test:coverage:*)",
      "Bash(npm run test:*)",
      "Bash(npm run test:e2e:dev4:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run lint:*)",
      "Bash(npx tsc:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npx tsc:*)",
      "Bash(npm search:*)",
      "Bash(awk:*)",
      "Bash(npx ts-node:*)",
      "Bash(npx ts-node:*)",
      "Bash(rg:*)",
      "Bash(echo)",
      "Bash(cargo search:*)",
      "Bash(npm run test:datacloak-integration:*)",
      "Bash(npm run test:datacloak-rate-limit:*)",
      "Bash(npm run test:datacloak-ffi:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(git push:*)",
      "Bash(npm run test:*)",
      "Bash(git add:*)",
      "Bash(timeout 30s npm run dev)",
      "Bash(touch:*)",
      "Bash(ADMIN_PASSWORD=admin123 npm run dev)",
      "Bash(ADMIN_PASSWORD=admin123 npm run start:api)",
      "Bash(ADMIN_PASSWORD=admin123 JWT_SECRET=test ENCRYPTION_KEY=test-32-char-encryption-key-here npm run dev:backend)",
      "Bash(ADMIN_PASSWORD=admin123 JWT_SECRET=test ENCRYPTION_KEY=test-32-char-encryption-key-here npm run dev)",
      "Bash(ADMIN_PASSWORD=admin123 JWT_SECRET=test ENCRYPTION_KEY=test-32-char-encryption-key-here npm run dev --workspace=packages/backend)",
      "Bash(ADMIN_PASSWORD=admin123 JWT_SECRET=test-jwt-secret-that-is-32-chars-long ENCRYPTION_KEY=test-32-char-encryption-key-here npm run dev)",
      "Bash(brew install:*)",
      "Bash(brew services start:*)",
      "Bash(redis-cli:*)",
      "Bash(chmod:*)",
      "Bash(./start-dev.sh:*)",
      "Bash(export:*)",
      "Bash(docker compose:*)",
      "Bash(docker:*)",
      "Bash(npx ts-node:*)",
      "Bash(npx node:*)",
      "Bash(/Users/thomaswagner/Documents/datacloak-sentiment-workbench/packages/backend/test-real-datacloak.sh:*)",
      "Bash(cargo build:*)",
      "Bash(npx tsc:*)",
      "Bash(./test-real-datacloak.sh:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(echo $DATACLOAK_LIBRARY_PATH)",
      "Bash(DATACLOAK_LIBRARY_PATH=\"/Users/thomaswagner/Documents/datacloak-sentiment-workbench/temp/datacloak/datacloak-core/target/release/libdatacloak_core.dylib\" npm test -- --testNamePattern=\"should complete full healthcare compliance workflow\" --verbose 2 >& 1)",
      "Bash(ADMIN_PASSWORD=test-password npm test -- src/tests/developer2-verification.test.ts)",
      "Bash(ADMIN_PASSWORD=test-password npm test -- src/tests/integration/datacloak.test.ts src/tests/integration/datacloak-integration.test.ts src/tests/developer2-verification.test.ts)",
      "Bash(ADMIN_PASSWORD=test-admin-password JWT_SECRET=test-jwt-secret npm test -- src/tests/developer2-verification.test.ts --verbose)",
      "Bash(open http://localhost:3000)",
      "Bash(open:*)",
      "Bash(npx vite build:*)",
      "Bash(npm run:*)",
      "Bash(npx serve:*)",
      "WebFetch(domain:github.com)",
      "Bash(python3:*)",
      "Bash(echo:*)",
      "Bash(/Users/thomaswagner/Documents/datacloak-sentiment-workbench/packages/backend/node_modules/.bin/jest)",
      "Bash(npx jest:*)",
      "Bash(zsh -c:*)",
      "Bash(timeout 90s npm test:*)",
      "Bash(NODE_ENV=test npm test -- src/services/__tests__/enhanced-database.service.test.ts --testNamePattern=\"should execute simple SELECT query\" --verbose)",
      "Bash(time npx jest \"src/client/__tests__/api-client-fixed.test.ts\" --silent)",
      "Bash(timeout 30s npx jest:*)",
      "Bash(sed:*)",
      "Bash(timeout 10s npm test src/tests/e2e/user-workflows.test.ts -- --testNamePattern=\"should handle end-to-end data upload and analysis workflow\")",
      "Bash(npm ci:*)",
      "Bash(npm view:*)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- --config jest.config.simple.js src/client/__tests__/api-client-enhanced.test.ts)",
      "Bash(npm uninstall:*)",
      "Bash(npx ts-jest:*)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- --config jest.config.simple.js src/client/__tests__/api-client-enhanced.test.ts --verbose)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- --config jest.config.simple.js src/client/__tests__/api-client-enhanced.test.ts --testNamePattern=\"should handle missing EventSource\" --verbose 2 >& 1)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- --config jest.config.simple.js src/client/__tests__/api-client-enhanced.test.ts --coverage --collectCoverageFrom='src/client/api-client.ts')",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- --config jest.config.simple.js src/client/__tests__/*.test.ts --coverage --collectCoverageFrom='src/client/api-client.ts')",
      "Bash(true)",
      "Bash(# Get all route file names (without extension)\nroute_files=$(find src/routes -name \"*.routes.ts\" -not -path \"*/__tests__/*\" | sed 's/.*\\///g' | sed 's/\\.ts$//' | sort)\n\n# Get all test file names (extract the route name from test files)\ntest_files=$(find src/routes/__tests__ -name \"*.test.ts\" 2>/dev/null | sed 's/.*\\///g' | sed 's/\\.test\\.ts$//' | sed 's/\\.[a-z]*$//' | sort | uniq)\n\necho \"Route files:\"\necho \"$route_files\"\necho\necho \"Test files (route names):\"\necho \"$test_files\"\necho\necho \"Routes WITHOUT corresponding test files:\"\ncomm -23 <(echo \"$route_files\" | sort) <(echo \"$test_files\" | sort))",
      "Bash(# Create a more accurate comparison\necho \"=== ROUTE FILES THAT NEED TEST FILES ===\"\necho\n\n# List all route files\nroute_files=(\n  \"analytics.routes.ts\"\n  \"auth.routes.ts\" \n  \"cache.routes.ts\"\n  \"circuit-breaker.routes.ts\"\n  \"compliance.routes.ts\"\n  \"config.routes.ts\"\n  \"connection-status.routes.ts\"\n  \"dashboard.routes.ts\"\n  \"data.routes.ts\"\n  \"export.routes.ts\"\n  \"health.routes.ts\"\n  \"jobs.routes.ts\"\n  \"monitoring.routes.ts\"\n  \"openai.routes.ts\"\n  \"patterns.routes.ts\"\n  \"redis-queue.routes.ts\"\n  \"risk-assessment.routes.ts\"\n  \"secrets.routes.ts\"\n  \"security.routes.ts\"\n  \"sentiment.routes.ts\"\n  \"sse.routes.ts\"\n  \"stream.routes.ts\"\n  \"transform.routes.ts\"\n  \"websocket.routes.ts\"\n)\n\n# Check which ones have tests\nroutes_without_tests=()\n\nfor route_file in \"${route_files[@]}\"; do\n  base_name=$(basename \"$route_file\" .ts)\n  \n  # Check if any test file exists for this route\n  if ! ls src/routes/__tests__/\"${base_name}\"*.test.ts 2>/dev/null | grep -q .; then\n    routes_without_tests+=(\"$route_file\")\n  fi\ndone\n\necho \"Route files that DO NOT have corresponding test files:\"\nprintf '%s\\n' \"${routes_without_tests[@]}\"\n\necho\necho \"Total route files: ${#route_files[@]}\"\necho \"Route files without tests: ${#routes_without_tests[@]}\")",
      "Bash(# List all route files and check for corresponding test files\necho \"=== ANALYSIS OF ROUTE FILES AND THEIR TEST COVERAGE ===\"\necho\n\nroutes_with_tests=()\nroutes_without_tests=()\n\n# Check each route file for corresponding tests\nfor route_file in src/routes/*.routes.ts; do\n  if [[ -f \"$route_file\" ]]; then\n    base_name=$(basename \"$route_file\" .ts)\n    route_name=$(basename \"$route_file\")\n    \n    # Check if test file exists (any variation)\n    test_found=false\n    if ls src/routes/__tests__/\"${base_name}\"*.test.ts >/dev/null 2>&1; then\n      test_found=true\n      routes_with_tests+=(\"$route_name\")\n    fi\n    \n    if [ \"$test_found\" = false ]; then\n      routes_without_tests+=(\"$route_name\")\n    fi\n  fi\ndone\n\necho \"ROUTE FILES WITH TESTS (${#routes_with_tests[@]} files):\"\nfor route in \"${routes_with_tests[@]}\"; do\n  echo \"  ✓ $route\"\ndone\n\necho\necho \"ROUTE FILES WITHOUT TESTS (${#routes_without_tests[@]} files):\"\nfor route in \"${routes_without_tests[@]}\"; do\n  echo \"  ✗ $route\"\ndone\n\necho\necho \"SUMMARY:\"\necho \"  Total route files: $((${#routes_with_tests[@]} + ${#routes_without_tests[@]}))\"\necho \"  Files with tests: ${#routes_with_tests[@]}\"\necho \"  Files needing tests: ${#routes_without_tests[@]}\")",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- --config jest.config.simple.js src/routes/__tests__/analytics.routes.test.ts --verbose)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/routes/__tests__/analytics.routes.test.ts --verbose)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/routes/__tests__/cache.routes.test.ts --verbose)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/routes/__tests__/circuit-breaker.routes.test.ts src/routes/__tests__/compliance.routes.test.ts --verbose)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/routes/__tests__/config.routes.test.ts --verbose)",
      "Bash(./dev05_coverage_check.sh:*)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/routes/__tests__/security.routes.test.ts --verbose)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/routes/__tests__/analytics.routes.test.ts --verbose --maxWorkers=1)",
      "Bash(OPENAI_API_KEY=sk-test-api-key npm test -- src/client/__tests__/*.test.ts --verbose 2 >& 1)",
      "Bash(sed:*)",
      "Bash(NODE_ENV=test npm start)",
      "Bash(NODE_ENV=test npx ts-node src/server.ts 2 >& 1)",
      "Bash(npm start)",
      "Bash(PORT=3001 node dist/server.js 2 >& 1)",
      "Bash(true)",
      "Bash(./find-undefined-log.sh:*)",
      "Bash(ps:*)",
      "Bash(kill:*)",
      "Bash(pkill:*)",
      "Bash(unset:*)",
      "Bash(sed:*)",
      "Bash(sqlite3:*)",
      "Bash(bash:*)",
      "Bash(./test-openai.sh:*)",
      "Bash(/usr/bin/env node:*)",
      "Bash(git rm:*)",
      "Bash(npx vitest run:*)",
      "Bash(npm audit:*)",
      "Bash(git reset:*)"
    ],
    "deny": []
  }
}